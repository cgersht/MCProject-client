{"version":3,"sources":["ng://components/lib/components.service.ts","ng://components/lib/components.component.ts","ng://components/lib/clock-and-date/clock-and-date.component.ts","ng://components/lib/components.module.ts","ng://components/lib/table/table.component.ts","ng://components/lib/clock/clock.component.ts","ng://components/lib/clock/clock.module.ts","ng://components/lib/table/table.module.ts"],"names":["ComponentsService","Injectable","args","providedIn","ComponentsComponent","prototype","ngOnInit","Component","selector","template","ClockAndDateComponent","zone","cd","this","time","isDestroy","_this","detach","runOutsideAngular","setTime","now","Date","getHours","formatNum","getMinutes","detectChanges","setTimeout","bind","i","ngOnDestroy","NgZone","ChangeDetectorRef","ComponentsModule","NgModule","declarations","imports","exports","TableComponent","dialog","dbClick","EventEmitter","displayedColumns","columns","map","_a","name","dataSource","MatTableDataSource","rows","paginator","ngOnChanges","changes","currentValue","getRecord","row","emit","encapsulation","ViewEncapsulation","None","MatDialog","Input","Output","ViewChild","MatPaginator","static","ClockComponent","ClockModule","CommonModule","entryComponents","TableModule","MatTableModule","MatPaginatorModule","MatButtonModule","DirectivesModule","MatDialogModule","FormsModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComponentsService {\r\n\r\n  constructor() { }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-components',\r\n  template: `\r\n    <p>\r\n      components works!\r\n    </p>\r\n  `,\r\n  styles: []\r\n})\r\nexport class ComponentsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { ChangeDetectorRef, Component, NgZone, OnDestroy, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-clock-and-date',\r\n  templateUrl: './clock-and-date.component.html',\r\n  styleUrls: ['./clock-and-date.component.scss']\r\n})\r\nexport class ClockAndDateComponent implements OnInit ,OnDestroy {\r\n\r\n  time = '00:00';\r\n  isDestroy = false;\r\n  constructor(private zone: NgZone, private cd: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.cd.detach();\r\n    this.zone.runOutsideAngular(() => this.setTime());\r\n  }\r\n\r\n  setTime() {\r\n    if (this.isDestroy) { return; }\r\n    const now = new Date();\r\n    this.time = `${now.getHours()}:${this.formatNum(now.getMinutes())}`;\r\n    this.cd.detectChanges();\r\n    setTimeout(this.setTime.bind(this), 6000);\r\n  }\r\n\r\n  formatNum(i) {\r\n    return i < 10 ? `0${i}` : i;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.isDestroy = true;\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { ComponentsComponent } from './components.component';\r\nimport { ClockAndDateComponent } from './clock-and-date/clock-and-date.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [ComponentsComponent, ClockAndDateComponent],\r\n  imports: [\r\n  ],\r\n  exports: [ComponentsComponent]\r\n})\r\nexport class ComponentsModule { }\r\n","import { Component, OnInit, Input, ViewChild, ViewEncapsulation, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\r\nimport { Column } from 'types'; \r\nimport { MatDialog, MatPaginator, MatTableDataSource } from '@angular/material';\r\n\r\n \r\n\r\n@Component({\r\n  selector: 'lib-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.scss'],\r\n  encapsulation:ViewEncapsulation.None\r\n})\r\nexport class TableComponent implements OnInit, OnChanges {\r\n  @Input() columns:Column[];\r\n  @Input() rows:any[];\r\n  // @Input() tableType:tableTypeEnum;\r\n  @Output() dbClick = new EventEmitter<any>();\r\n  displayedColumns: string[] =[]\r\n  dataSource \r\n    \r\n    \r\n\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  constructor(\r\n    public dialog: MatDialog\r\n    ) { }\r\n\r\n  ngOnInit() {\r\n    setTimeout(() => {\r\n      this.displayedColumns = this.columns.map(({name}) => name   )\r\n    }, 200);\r\n      \r\n    \r\n     this.dataSource = new MatTableDataSource<any>(this.rows);\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n     const {rows} = changes;\r\n     if(rows){\r\n       this.dataSource = new MatTableDataSource<any>(rows.currentValue);\r\n       this.dataSource.paginator = this.paginator;\r\n     }\r\n  }\r\n\r\n  getRecord(row){\r\n      this.dbClick.emit(row);   \r\n  }\r\n\r\n  //  nnn(){\r\n  //   // switch(this.tableType){\r\n  //     // case tableTypeEnum.Project:\r\n  //    console.log(\"trdfghjkhj\");\r\n\r\n  //    }\r\n   \r\n\r\n}\r\n","import { ChangeDetectorRef, Component, NgZone, OnDestroy, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-clock',\r\n  templateUrl: './clock.component.html',\r\n  styleUrls: ['./clock.component.scss']\r\n})\r\nexport class ClockComponent implements OnInit,OnDestroy {\r\n  time = '00:00';\r\n  isDestroy = false;\r\n  constructor(private zone: NgZone, private cd: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.cd.detach();\r\n    this.zone.runOutsideAngular(() => this.setTime());\r\n  }\r\n\r\n  setTime() {\r\n    if (this.isDestroy) { return; }\r\n    const now = new Date();\r\n    this.time = `${now.getHours()}:${this.formatNum(now.getMinutes())}`;\r\n    this.cd.detectChanges();\r\n    setTimeout(this.setTime.bind(this), 6000);\r\n  }\r\n\r\n  formatNum(i) {\r\n    return i < 10 ? `0${i}` : i;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.isDestroy = true;\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClockComponent } from './clock.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [ClockComponent],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports:[ClockComponent],\r\n  entryComponents:[ClockComponent]\r\n})\r\nexport class ClockModule { }\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TableComponent } from './table.component';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport { MatButtonModule, MatDialogModule, MatPaginatorModule } from '@angular/material';\r\nimport { DirectivesModule } from 'directives';\r\nimport { FormsModule } from '@angular/forms';\r\n// import { AddProjectModule } from 'src/app/main/view/add-project/add-project.module';\r\nimport { ClockModule } from '../clock/clock.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [TableComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatButtonModule,\r\n    DirectivesModule,\r\n    MatDialogModule,\r\n    FormsModule,\r\n    ClockModule,\r\n  ],\r\n  exports:[TableComponent],\r\n})\r\nexport class TableModule { }\r\n"]}